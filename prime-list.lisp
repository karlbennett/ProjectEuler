(defun prime-array (n)
  "This first creates an array where each index represents
   all the odd numbers up to 'n' starting at 3 e.g n=6 array=[0]<=>(3),[1]<=>(5)
   The array is filled with 0's and when it is returned evey index that
   represents a prime will have the value 0 as apposed to non-prime indexes
   having the value 1."
  (let* (; Create a length of n...
	 (lnth (- (/ ; ...devided by 2...
		   (if (evenp n) ; ...if it is even...
		       n (1+ n) ; ...else (n + 1) if it is odd...
		       ) 2) 1)) ; ...minus 1 because we already know 2 is primes.
	 (primes (make-array lnth)))
    (dotimes (num lnth) ; Loop through all the elements of the primes array...
      ; ...create a step that is represents that odd number at the current index...
      (let ((step (+ (* num 2) 3)))
	(do ((i (+ num step) (+ i step))) ; ...then step...
	    ((> i (- lnth 1))) ; ...to the end of the array...
	  (setf (aref primes i) 1)))) ; ...marking every multiple with the value 1.
    primes))

(defun prime-array->list (a)
  "This function takes an array that is generated by prime-array and converts
   it into a list of prime numbers by counting through the array and adding
   every odd number index to it's list."
  (append '(2) (loop for p from 0 below (length a) ; Loop to the end of array a...
		  when (= (aref a p) 0) ; ...and at every index with a value of 0...
					; ... collect it's odd number representation in a list.
		  collecting (+ (* p 2) 3))))

(defun prime-list (n)
  "This function uses prime-array and prime-array->list to return the list off
   all the prime number under 'n'."
  (prime-array->list (prime-array n)))
